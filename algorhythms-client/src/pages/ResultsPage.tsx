import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../auth/AuthProvider";
import { usePlaylistGeneration } from "../lib/components/PlaylistGenerationContext";
import SpotifyEmbedPlayer from "../lib/components/SpotifyEmbedPlayer";
// import { updateSpotifyPlaylist } from "../lib/api";
import TrackItem from "../lib/components/TrackItem";
import { PlayCircleIcon } from "@heroicons/react/16/solid";

// The URI of the playlist you want to update on Spotify
const PLAYLIST_URI_TO_UPDATE = "spotify:playlist:YOUR_PLAYLIST_ID_HERE";

export default function ResultsPage() {
	const navigate = useNavigate();
	const { spotifyAuth } = useAuth();
	const { finalData } = usePlaylistGeneration();

	// State to control which playlist (if any) is loaded in the embed player
	const [activePlaylistUri, setActivePlaylistUri] = useState<string | null>(
		null,
	);
	const [isLoading, setIsLoading] = useState(false);

	// Navigate away if there's no data (e.g., direct page load)
	if (!finalData || Object.keys(finalData).length === 0) {
		navigate("/create-playlist", { replace: true });
		return null; // Render nothing while redirecting
	}

	const handleSavePlaylist = async (tracks: any[]) => {
		setIsLoading(true);
		const trackUris = tracks.map((track) => track.uri);
		try {
			console.log("updateSpotifyPlaylist", trackUris, spotifyAuth);
			// await updateSpotifyPlaylist(trackUris, spotifyAuth);
			// On success, set the active URI to show the player
			setActivePlaylistUri(PLAYLIST_URI_TO_UPDATE);
		} catch (error) {
			console.error("Failed to save playlist to Spotify:", error);
			// You could show an error message to the user here
		} finally {
			setIsLoading(false);
		}
	};

	return (
		<div className='p-8 max-w-4xl mx-auto'>
			<h1 className='text-4xl font-bold mb-2'>Generated Playlists</h1>
			<p className='text-gray-600 mb-8'>
				Here are the playlists generated by AlgoRhythms. Save one to Spotify to
				listen.
			</p>

			<div className='space-y-12'>
				{Object.entries(finalData).map(([name, playlistData]) => (
					<div
						key={name}
						className='bg-white p-6 rounded-2xl shadow-lg border border-gray-200'
					>
						<div className='flex justify-between items-center mb-4'>
							<div>
								<h2 className='text-2xl font-bold capitalize'>
									{name.replace(/_/g, " ")}
								</h2>
								<p className='text-sm text-gray-500'>
									Generation Time: {playlistData.generation_time.toFixed(2)}ms
								</p>
							</div>
							<button
								onClick={() => handleSavePlaylist(playlistData.tracks)}
								disabled={isLoading}
								className='flex items-center gap-2 bg-green-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-600 transition-colors disabled:bg-gray-400'
							>
								{isLoading ? "Saving..." : "Save to Spotify"}
								<PlayCircleIcon className='size-4' />
							</button>
						</div>

						{/* Grid of Track Cards */}
						<div className='grid grid-cols-1 gap-4'>
							{playlistData.tracks.map((track: any) => (
								<div
									key={track.id}
									className='p-3 bg-gray-50 rounded-lg border border-gray-200'
								>
									<TrackItem track={track} />
								</div>
							))}
						</div>
					</div>
				))}
			</div>

			{/* Conditionally render the Spotify Player at the bottom */}
			{activePlaylistUri && (
				<div className='mt-12'>
					<h2 className='text-2xl font-bold mb-4'>Now Playing</h2>
					<SpotifyEmbedPlayer uri={activePlaylistUri} />
				</div>
			)}
		</div>
	);
}
